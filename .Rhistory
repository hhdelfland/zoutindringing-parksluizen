perc = apply(test,1,myfunc)
mn = apply(perc,1,mean,na.rm=T)[1:72]
sd0 = apply(perc,1,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-36,35)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0) +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
plot(test[,sample(x = ncol(test),size = 1)],ylim = c(0,20))
lapply(test[,sample(x = ncol(test),size = 10)],lines)
abline(v=36)
plot(test[,sample(x = ncol(test),size = 1)],ylim = c(0,20))
plot(perc[,sample(x = ncol(test),size = 1)],ylim = c(0,20))
perc = apply(test,1,myfunc)
plot(perc[,sample(x = ncol(perc),size = 1)],ylim = c(0,20))
plot(perc[,sample(x = ncol(perc),size = 1)])
perc = apply(test,1,myfunc)
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
lapply(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 10)],lines)
abline(v=0)
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
lapply(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 10)],lines)
lapply(perc[,sample(x = ncol(perc),size = 10)],lines,x = seq(-36,35)*10)
?plot
lapply(perc[sample(x = ncol(perc),size = 10)],lines,x = seq(-36,35)*10)
lapply(perc[sample(ncol(perc),size = 10)],lines,x = seq(-36,35)*10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
perc
perc = apply(test,1,myfunc)
perc
View(perc)
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
my_plotr = function(a) {
lines(seq(-35,36)*10,a)
}
lapply(perc[sample(ncol(perc),size = 10)],my_plotr)
perc[sample(ncol(perc),size = 10)]
perc[,sample(x = ncol(perc),size = 1)]
sample(ncol(perc),size = 10)
sample(nrow(perc),size = 10)
sample(nrow(perc),size = 10)
sample(nrow(perc),size = 10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
sample(ncol(perc),size = 10)
dim(perc)
test = as.data.frame(t(empty_db))
test
test = test[1:72,]
myfunc = function(x) {
return(x/mean(x[35],x[36]))
}
perc = apply(test,1,myfunc)
perc
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
length(seq(-36,35)*10)
perc[,sample(x = ncol(perc),size = 1)]
perc[,sample(x = nrow(perc),size = 1)]
perc[sample(x = nrow(perc),size = 1),]
perc[sample(x = ncol(perc),size = 1),]
perc[sample(x = ncol(perc),size = 1),]
perc[sample(x = ncol(perc),size = 1),]
perc[1,]
perc[,1]
perc[1,sample(x = ncol(perc),size = 1)]
perc[,sample(x = ncol(perc),size = 1)]
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
perc[,sample(x = ncol(perc),size = 1)]
length(perc[,sample(x = ncol(perc),size = 1)])
perc = apply(test,2,myfunc)
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
lapply(perc[sample(ncol(perc),size = 10)],my_plotr)
lapply(perc[,sample(ncol(perc),size = 10)],my_plotr)
my_plotr = function(x,a) {
for (i in 1:a) {
lines(seq(-35,36)*10,x)
}
}
my_plotr = function(x,a) {
for (i in 1:a) {
lines(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
}
}
my_plotr = function(perc,a) {
for (i in 1:a) {
lines(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
}
}
my_plotr(perc,2)
my_plotr(perc,2)
perc = apply(test,2,myfunc)
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
my_plotr(perc,2)
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2))
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2))
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2))
my_plotr(perc,2)
lines(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2))
my_plotr(perc,2)
plot(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
my_plotr(perc,2)
my_plotr(perc,2)
my_plotr(perc,2)
abline(v=0)
perc = apply(test,2,myfunc)
plot(seq(-35,36)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
my_plotr(perc,2)
abline(v=0)
mn = apply(perc,1,mean,na.rm=T)[1:72]
sd0 = apply(perc,1,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0) +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
mn = apply(perc,1,mean,na.rm=T)[1:72]
sd0 = apply(perc,1,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0) +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
mn = apply(perc,2,mean,na.rm=T)[1:72]
sd0 = apply(perc,2,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0) +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
mn
mn
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0,col = 'blue') +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
plot(seq(-35,36)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
abline(v=0,col = 'blue')
my_plotr(perc,2)
my_plotr(perc,2)
my_plotr(perc,2)
my_plotr(perc,2)
my_plotr(perc,2)
my_plotr(perc,2)
my_plotr(perc,10)
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0,col = 'blue') +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
kader
kader
parkhaven_opp$Waarde
boxplot(parkhaven_opp$Waarde)
?subset
subset(parkhaven_opp,Waarde>5)
test_set = maak_TS(subset(parkhaven_opp,Waarde>5))
for (row in 1:nrow(kaders)) {
if (row %% 200 == 0) {
print(row)
}
kader = kaders[row,]
new_interval = interval(kader[[2]],kader[[3]])
#kader_waardes = parkhaven_opp[parkhaven_opp$datetime %within% new_interval,5]
kader_waardes = test_set[paste(kader[[2]],kader[[3]],sep = '/')]
if (length(kader_waardes) < (ncols+buffer)) {
kader_waardes = c(as.vector(kader_waardes),rep(NA,ncols+buffer-length(kader_waardes)))
}
#empty_db = rbind.fill(empty_db,as.data.frame(t(kader_waardes)))
empty_db[row,] = as.vector(kader_waardes)
}
test = as.data.frame(t(empty_db))
test = test[1:72,]
myfunc = function(x) {
return(x/mean(x[35],x[36]))
}
my_plotr = function(perc,a) {
for (i in 1:a) {
lines(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
}
}
perc = apply(test,2,myfunc)
plot(seq(-35,36)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
plot(seq(-35,36)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
abline(v=0,col = 'blue')
my_plotr(perc,10)
mn = apply(perc,2,mean,na.rm=T)[1:72]
sd0 = apply(perc,2,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0,col = 'blue') +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
View(empty_db)
test_set = parkhaven_opp_TS
for (row in 1:nrow(kaders)) {
if (row %% 200 == 0) {
print(row)
}
kader = kaders[row,]
new_interval = interval(kader[[2]],kader[[3]])
#kader_waardes = parkhaven_opp[parkhaven_opp$datetime %within% new_interval,5]
kader_waardes = test_set[paste(kader[[2]],kader[[3]],sep = '/')]
if (length(kader_waardes) < (ncols+buffer)) {
kader_waardes = c(as.vector(kader_waardes),rep(NA,ncols+buffer-length(kader_waardes)))
}
#empty_db = rbind.fill(empty_db,as.data.frame(t(kader_waardes)))
empty_db[row,] = as.vector(kader_waardes)
}
View(empty_db)
test = as.data.frame(t(empty_db))
test = test[1:72,]
myfunc = function(x) {
return(x/mean(x[35],x[36]))
}
my_plotr = function(perc,a) {
for (i in 1:a) {
lines(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
}
}
perc = apply(test,2,myfunc)
plot(seq(-35,36)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
abline(v=0,col = 'blue')
mn = apply(perc,2,mean,na.rm=T)[1:72]
sd0 = apply(perc,2,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
mn = apply(perc,2,mean,na.rm=T)[1:72]
sd0 = apply(perc,2,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0,col = 'blue') +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
test_set = maak_TS(subset(parkhaven_opp,Waarde>5))
test_set
dim9test_set)
dim(test_set)
empty_db = data.frame(matrix(NA,nrow = dim(kaders)[1],ncol = ncols+buffer))
test_set = parkhaven_opp_TS
test_set = maak_TS(subset(parkhaven_opp,Waarde>5))
for (row in 1:nrow(kaders)) {
if (row %% 200 == 0) {
print(row)
}
kader = kaders[row,]
new_interval = interval(kader[[2]],kader[[3]])
#kader_waardes = parkhaven_opp[parkhaven_opp$datetime %within% new_interval,5]
kader_waardes = test_set[paste(kader[[2]],kader[[3]],sep = '/')]
if (length(kader_waardes) < (ncols+buffer)) {
kader_waardes = c(as.vector(kader_waardes),rep(NA,ncols+buffer-length(kader_waardes)))
}
#empty_db = rbind.fill(empty_db,as.data.frame(t(kader_waardes)))
empty_db[row,] = as.vector(kader_waardes)
}
test = as.data.frame(t(empty_db))
test = test[1:72,]
#parkhaven_opp[which((parkhaven_opp$datetime > kader[[2]] & parkhaven_opp$datetime < kader[[3]])),5]
myfunc = function(x) {
return(x/mean(x[35],x[36]))
}
my_plotr = function(perc,a) {
for (i in 1:a) {
lines(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
}
}
perc = apply(test,2,myfunc)
#plot(seq(-35,36)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
#abline(v=0,col = 'blue')
#my_plotr(perc,10)
mn = apply(perc,2,mean,na.rm=T)[1:72]
sd0 = apply(perc,2,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0,col = 'blue') +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
View(test)
View(empty_db)
test_set
parkhaven_opp_TS
test_set
parkhaven_opp_TS
for (row in 1:nrow(kaders)) {
if (row %% 200 == 0) {
print(row)
}
kader = kaders[row,]
new_interval = interval(kader[[2]],kader[[3]])
#kader_waardes = parkhaven_opp[parkhaven_opp$datetime %within% new_interval,5]
kader_waardes = test_set[paste(kader[[2]],kader[[3]],sep = '/')]
if (length(kader_waardes) < (ncols+buffer)) {
kader_waardes = c(as.vector(kader_waardes),rep(NA,ncols+buffer-length(kader_waardes)))
}
#empty_db = rbind.fill(empty_db,as.data.frame(t(kader_waardes)))
empty_db[row,] = as.vector(kader_waardes)
}
warnings()
row = 3
kader = kaders[row,]
kader
new_interval = interval(kader[[2]],kader[[3]])
#kader_waardes = parkhaven_opp[parkhaven_opp$datetime %within% new_interval,5]
kader_waardes = test_set[paste(kader[[2]],kader[[3]],sep = '/')]
kader_waardes
test_set[paste(kader[[2]],kader[[3]],sep = '/')]
kader
test_set
head(test_set)
head(parkhaven_opp_TS)
empty_db = data.frame(matrix(NA,nrow = dim(kaders)[1],ncol = ncols+buffer))
test_set = parkhaven_opp_TS
test_set = maak_TS(subset(parkhaven_opp,Waarde>3))
for (row in 1:nrow(kaders)) {
if (row %% 200 == 0) {
print(row)
}
kader = kaders[row,]
new_interval = interval(kader[[2]],kader[[3]])
#kader_waardes = parkhaven_opp[parkhaven_opp$datetime %within% new_interval,5]
kader_waardes = test_set[paste(kader[[2]],kader[[3]],sep = '/')]
if (length(kader_waardes) < (ncols+buffer)) {
kader_waardes = c(as.vector(kader_waardes),rep(NA,ncols+buffer-length(kader_waardes)))
}
#empty_db = rbind.fill(empty_db,as.data.frame(t(kader_waardes)))
empty_db[row,] = as.vector(kader_waardes)
}
kader
test_set = parkhaven_opp_TS
for (row in 1:nrow(kaders)) {
if (row %% 200 == 0) {
print(row)
}
kader = kaders[row,]
new_interval = interval(kader[[2]],kader[[3]])
#kader_waardes = parkhaven_opp[parkhaven_opp$datetime %within% new_interval,5]
kader_waardes = test_set[paste(kader[[2]],kader[[3]],sep = '/')]
if (length(kader_waardes) < (ncols+buffer)) {
kader_waardes = c(as.vector(kader_waardes),rep(NA,ncols+buffer-length(kader_waardes)))
}
#empty_db = rbind.fill(empty_db,as.data.frame(t(kader_waardes)))
empty_db[row,] = as.vector(kader_waardes)
}
test = as.data.frame(t(empty_db))
test = test[1:72,]
pmax(test)
View(pmax(test))
View(max(test))
apply(test,2,min,na.rm=T)
which(apply(test,2,min,na.rm=T)>5)
test[,which(apply(test,2,min,na.rm=T)>5)]
View(test[,which(apply(test,2,min,na.rm=T)>5)])
test = test[,which(apply(test,2,min,na.rm=T)>5)]
#parkhaven_opp[which((parkhaven_opp$datetime > kader[[2]] & parkhaven_opp$datetime < kader[[3]])),5]
myfunc = function(x) {
return(x/mean(x[35],x[36]))
}
my_plotr = function(perc,a) {
for (i in 1:a) {
lines(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
}
}
perc = apply(test,2,myfunc)
#plot(seq(-35,36)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
#abline(v=0,col = 'blue')
#my_plotr(perc,10)
mn = apply(perc,2,mean,na.rm=T)[1:72]
sd0 = apply(perc,2,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0,col = 'blue') +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
test = as.data.frame(t(empty_db))
test = test[1:72,]
test = test[,which(apply(test,2,min,na.rm=T)>10)]
#parkhaven_opp[which((parkhaven_opp$datetime > kader[[2]] & parkhaven_opp$datetime < kader[[3]])),5]
myfunc = function(x) {
return(x/mean(x[35],x[36]))
}
my_plotr = function(perc,a) {
for (i in 1:a) {
lines(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
}
}
perc = apply(test,2,myfunc)
#plot(seq(-35,36)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
#abline(v=0,col = 'blue')
#my_plotr(perc,10)
mn = apply(perc,2,mean,na.rm=T)[1:72]
sd0 = apply(perc,2,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0,col = 'blue') +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
test = as.data.frame(t(empty_db))
test = test[1:72,]
test = test[,which(apply(test,2,min,na.rm=T)>5)]
#parkhaven_opp[which((parkhaven_opp$datetime > kader[[2]] & parkhaven_opp$datetime < kader[[3]])),5]
myfunc = function(x) {
return(x/mean(x[35],x[36]))
}
my_plotr = function(perc,a) {
for (i in 1:a) {
lines(seq(-36,35)*10,perc[,sample(x = ncol(perc),size = 1)])
}
}
perc = apply(test,2,myfunc)
#plot(seq(-35,36)*10,perc[,sample(x = ncol(perc),size = 1)],ylim = c(0.5,2),type = 'lines')
#abline(v=0,col = 'blue')
#my_plotr(perc,10)
mn = apply(perc,2,mean,na.rm=T)[1:72]
sd0 = apply(perc,2,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0,col = 'blue') +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
mn = apply(perc,2,mean,na.rm=T)[1:72]
sd0 = apply(perc,2,sd,na.rm=T)[1:72]
sd1 = mn+sd0
sd2 = mn-sd0
plot(seq(-35,36)*10,mn,type = 'lines',col = 'red',ylab = 'EGV % t.o.v. aanvang schutten',xlab = 'tijd voor/na schutten (min)',
main = 'EGV in parkhaven voor en na schutten t.o.v. EGV op schutten',sub = 'Gemiddeld in rood, in zwart een standaard deviatie band') +
abline(v=0,col = 'blue') +
lines(seq(-35,36)*10,sd1) +
lines(seq(-35,36)*10,sd2)
install.packages("languageserver")
install.packages("languageserver")
install.packages("languageserver")
install.packages("languageserver")
parkhaven_bodem = EGV_parser('Data_EC/OW000-008 bodem Parkhaven export-trend-20150101000000-20201210171559.csv')
parkhaven_opp = EGV_parser('Data_EC/OW000-008 oppervlak Parkhaven export-trend-20150101000000-20201210171559.csv')
parkhaven_bodem = EGV_parser('Data_EC/OW000-008 bodem Parkhaven export-trend-20150101000000-20201210171559.csv')
View(head(parkhaven_bodem))
View(head(parkhaven_opp))
EGV_parser = function(file) {
EGV_bestand = read.csv(file
,row.names = NULL)
head(EGV_bestand)
EGV_bestand$Waarde[which(is.na(EGV_bestand$Waarde))] = 0
EGV_gelijmd_txt = paste(EGV_bestand$Tijd..Europe.Amsterdam.,EGV_bestand$Waarde,sep = ',')
EGV_gelijmd = as.numeric(sub(",", ".", EGV_gelijmd_txt))
EGV_bestand$Tijd..Europe.Amsterdam. = EGV_gelijmd
colnames(EGV_bestand) = colnames(EGV_bestand)[2:dim(EGV_bestand)[2]]
EGV_bestand = data.frame(EGV_bestand)[1:(dim(EGV_bestand)[2]-2)]
head(EGV_bestand)
EGV_bestand$datetime = as.POSIXlt(paste0(EGV_bestand$Datum,' ',EGV_bestand$Tijd..Europe.Amsterdam.))
EGV_data = EGV_bestand
return(EGV_data)
}
parkhaven_bodem_TS = maak_TS(parkhaven_bodem)
parkhaven_opp = EGV_parser('Data_EC/OW000-008 oppervlak Parkhaven export-trend-20150101000000-20201210171559.csv')
parkhaven_bodem = EGV_parser('Data_EC/OW000-008 bodem Parkhaven export-trend-20150101000000-20201210171559.csv')
file = 'Data_EC/OW000-008 bodem Parkhaven export-trend-20150101000000-20201210171559.csv'
EGV_bestand = read.csv(file
,row.names = NULL)
EGV_bestand
EGV_bestand = read.csv(file
,row.names = NULL,fileEncoding = 'UTF-16LE')
head(EGV_bestand)
EGV_bestand = read.table(file
,row.names = NULL)
EGV_bestand = read.csv2(file,row.names = NULL,)
EGV_bestand = read.csv2(file,row.names = NULL,sep = '\t')
head(read.csv2(file,row.names = NULL,sep = '\t'))
head(read.csv(file,row.names = NULL,sep="\t", fileEncoding="UTF-16LE"))
EGV_parser = function(file) {
EGV_bestand = read.csv(file,row.names = NULL,sep="\t", fileEncoding="UTF-16LE")
head(EGV_bestand)
EGV_bestand$Waarde[which(is.na(EGV_bestand$Waarde))] = 0
EGV_gelijmd_txt = paste(EGV_bestand$Tijd..Europe.Amsterdam.,EGV_bestand$Waarde,sep = ',')
EGV_gelijmd = as.numeric(sub(",", ".", EGV_gelijmd_txt))
EGV_bestand$Tijd..Europe.Amsterdam. = EGV_gelijmd
colnames(EGV_bestand) = colnames(EGV_bestand)[2:dim(EGV_bestand)[2]]
EGV_bestand = data.frame(EGV_bestand)[1:(dim(EGV_bestand)[2]-2)]
head(EGV_bestand)
EGV_bestand$datetime = as.POSIXlt(paste0(EGV_bestand$Datum,' ',EGV_bestand$Tijd..Europe.Amsterdam.))
EGV_data = EGV_bestand
return(EGV_data)
}
parkhaven_opp = EGV_parser('Data_EC/OW000-008 oppervlak Parkhaven export-trend-20150101000000-20201210171559.csv')
parkhaven_bodem = EGV_parser('Data_EC/OW000-008 bodem Parkhaven export-trend-20150101000000-20201210171559.csv')
